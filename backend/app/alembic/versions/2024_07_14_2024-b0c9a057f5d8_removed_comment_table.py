"""Removed comment table

Revision ID: b0c9a057f5d8
Revises: 41ffd096a143
Create Date: 2024-07-14 20:24:22.469548

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b0c9a057f5d8'
down_revision: Union[str, None] = '41ffd096a143'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('users_comment_id_fkey', 'user', type_='foreignkey')
    op.drop_column('user', 'comment_id')
    op.drop_index('ix_comment_owner_id', table_name='comment')
    op.drop_table('comment')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('comment_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('users_comment_id_fkey', 'user', 'comment', ['comment_id'], ['id'], ondelete='SET NULL')
    op.create_table('comment',
                    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
                    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
                    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              server_default=sa.text("timezone('utc'::text, now())"), autoincrement=False,
                              nullable=False),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              server_default=sa.text("timezone('utc'::text, now())"), autoincrement=False,
                              nullable=False),
                    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], name='fk_comment_owner_id_user',
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', name='comment_pkey')
                    )
    op.create_index('ix_comment_owner_id', 'comment', ['owner_id'], unique=False)
    # ### end Alembic commands ###
